=begin
PROBLEM:
Write a program that can calculate the Hamming distance between DNA strands

TERMS:
Point mutations -> type of nucleic acid mutation
  - one base (ie ACGT) is replaced with another at a single nucleotide
Hamming Distance -> min number of point mutations that could have occurred on
the evolutionary path between the two strands.
  - generated by counting the num of differences between two homologous DNA
    strands taken from different genomes with a common ancestor
  - ex: GAGCCTACTAACGGGAT
        CATCGTAATGACGGCCT
        ^ ^ ^  ^ ^    ^^ => 7 differences, Hamming distance = 7
  - can only be defined for sequences of equal length. If given two different
    lengths, use shorter length to computer Hamming distance

Input: two strands of DNA (represented by strings of nucleotides)
Goal: Count the differences between them to generate Hamming Distance
Rules: If strands are of different lengths, only check for differences until
       shorter length is reached
Output: A number (integer) representing Hamming distance

EXAMPLES/TEST CASES:
- two empty strands of DNA should produce a hamming distance of 0
- identical strands of DNA should produce a hamming distance of 0

- Create a DNA class, instantiating a DNA object takes one argument, a string
  representing the original strand of DNA to compare against
- DNA#hamming_distance method, takes an argument, a string representing strand
  of DNA to compare for differences
- When we compare DNA strands of two different lengths, we should not mutate the
  size of the original strand of DNA

ALGORITHM:
DNA::new(strand)
  - assign strand to an instance variable
  - create an array of each char called nucleotides?

DNA#hamming_distance(distance)
  - initialize a counter to 0
  - get max iteration number -> the size of shorter DNA strand - 1
  - iterate from 0 to max iteration number, tracking index
    - if the char at current i in strand != the char at current i in distance
      - increment the counter by 1
  - return the counter when iteration is complete
=end

class DNA
  def initialize(strand)
    @strand = strand
  end

  def hamming_distance(distance)
    differences = 0
    max_iterations = [@strand, distance].min_by(&:size).size
    (0...max_iterations).each do |i|
      differences += 1 unless @strand[i] == distance[i]
    end

    differences
  end
end
